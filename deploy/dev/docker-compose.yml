services:
  client:
    build:
      context: ../../client
      dockerfile: Dockerfile
    container_name: pim_client
    volumes:
      - ../../client/src:/app/src
      - ../../client/public:/app/public
    environment:
      - VITE_API_URL=/api
      - VITE_AUTH_URL=/auth
      - VITE_ASSETS_URL=
    networks:
      - pim_network

  api:
    build:
      context: ../../services/graphql-service
      dockerfile: Dockerfile
    container_name: pim_api
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=pim_db
      - AUTH_SERVICE_URL=http://auth:4001/auth
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_DEFAULT_TTL=3600
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pim_network
    volumes:
      - ../../services/graphql-service/src:/app/src
      - ../../services/graphql-service/dist:/app/dist

  postgres:
    image: postgres:15-alpine
    container_name: pim_postgres
    environment:
      POSTGRES_DB: pim_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5435:5432' # Exposition pour DBeaver uniquement
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Structure initiale
      - ../../storage/postgres/init/01_init.sql:/docker-entrypoint-initdb.d/01_init.sql
      # Dossier des migrations
      - ../../storage/postgres/migrations:/docker-entrypoint-migrations.d
      # Script d'exécution des migrations
      - ../../storage/postgres/run-migrations.sh:/docker-entrypoint.sh/run-migrations.sh
      # Import des données après les migrations
      - ../../storage/postgres/init/02_import.sql:/docker-entrypoint-initdb.d/02_import.sql
      - ../../storage/postgres/init/03_categories_seed.sql:/docker-entrypoint-initdb.d/03_categories_seed.sql
      - ../../storage/postgres/init/04_tags_seed.sql:/docker-entrypoint-initdb.d/04_tags_seed.sql
      - ../../storage/postgres/init/05_actions_seed.sql:/docker-entrypoint-initdb.d/05_actions_seed.sql
      - ../../storage/postgres/init/06_users_seed.sql:/docker-entrypoint-initdb.d/06_users_seed.sql
      - ../../storage/postgres/data/products.csv:/docker-entrypoint-initdb.d/products.csv
    networks:
      - pim_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  auth:
    build:
      context: ../../services/auth-service
      dockerfile: Dockerfile
    container_name: pim_auth
    volumes:
      - ../../services/auth-service/src:/app/src
      - ../../services/auth-service/dist:/app/dist
    environment:
      - NODE_ENV=development
      - PORT=4001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=pim_db
      - JWT_ACCESS_TOKEN_SECRET=my_dev_access_secret
      - JWT_REFRESH_TOKEN_SECRET=my_dev_refresh_secret
    depends_on:
      postgres:
        condition: service_healthy
      mail:
        condition: service_started
    networks:
      - pim_network

  mail:
    build:
      context: ../../services/mail-service
      dockerfile: Dockerfile
    container_name: pim_mail
    volumes:
      - ../../services/mail-service/src:/app/src
      - ../../services/mail-service/dist:/app/dist
    env_file:
      - ../../services/mail-service/.env
    environment:
      - NODE_ENV=development
      - PORT=3002
    networks:
      - pim_network

  upload:
    build:
      context: ../../services/upload-service
      dockerfile: Dockerfile
    container_name: pim_upload
    volumes:
      - ../../services/upload-service/src:/app/src
      - ../../services/upload-service/dist:/app/dist
      - ../../storage/assets/images:/storage/assets/images
      - ../../storage/assets/logos:/storage/assets/logos
    environment:
      - NODE_ENV=development
      - PORT=3003
      - AUTH_SERVICE_URL=http://auth:4001/auth
    networks:
      - pim_network

  nginx:
    image: nginx:latest
    container_name: pim_nginx
    ports:
      - '8000:80' # Expose NGINX sur le port 8000
    volumes:
      - ../../nginx.conf:/etc/nginx/nginx.conf:ro # Monte le fichier nginx.conf
      - ../../storage/assets/images:/storage/assets/images # Monte les assets
      - ../../storage/assets/logos:/storage/assets/logos # Monte les assets
    depends_on:
      - client
      - api
      - auth
      - mail
      - upload
    networks:
      - pim_network

  redis:
    image: redis:alpine
    container_name: pim_redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      - ../../storage/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - pim_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
    name: pim_postgres_data
  redis_data:
    name: pim_redis_data

networks:
  pim_network:
    name: pim_network
    driver: bridge
