services:
  client:
    build:
      context: ../../client
      dockerfile: Dockerfile
    container_name: pim_client
    volumes:
      - ../../client/src:/app/src
      - ../../client/public:/app/public
    environment:
      - VITE_API_URL=http://localhost:8000/api # L'API passera par NGINX
    networks:
      - pim_network

  api:
    build:
      context: ../../services/graphql-service
      dockerfile: Dockerfile
    container_name: pim_api
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=pim_db
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pim_network
    volumes:
      - ../../services/graphql-service/src:/app/src
      - ../../services/graphql-service/dist:/app/dist

  postgres:
    image: postgres:15-alpine
    container_name: pim_postgres
    environment:
      POSTGRES_DB: pim_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5435:5432' # Exposition pour DBeaver uniquement
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Structure initiale
      - ../../storage/postgres/init/01_init.sql:/docker-entrypoint-initdb.d/01_init.sql
      # Dossier des migrations
      - ../../storage/postgres/migrations:/docker-entrypoint-migrations.d
      # Script d'exécution des migrations
      - ../../storage/postgres/run-migrations.sh:/docker-entrypoint.sh/run-migrations.sh
      # Import des données après les migrations
      - ../../storage/postgres/init/02_import.sql:/docker-entrypoint-initdb.d/02_import.sql
      - ../../storage/postgres/init/03_categories_seed.sql:/docker-entrypoint-initdb.d/03_categories_seed.sql
      - ../../storage/postgres/init/04_tags_seed.sql:/docker-entrypoint-initdb.d/04_tags_seed.sql
      - ../../storage/postgres/init/05_actions_seed.sql:/docker-entrypoint-initdb.d/05_actions_seed.sql
      - ../../storage/postgres/init/06_users_seed.sql:/docker-entrypoint-initdb.d/06_users_seed.sql
      - ../../storage/postgres/data/products.csv:/docker-entrypoint-initdb.d/products.csv
    command: /docker-entrypoint.sh/run-migrations.sh
    networks:
      - pim_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:latest
    container_name: pim_nginx
    ports:
      - '8000:80' # Expose NGINX sur le port 8000
    volumes:
      - ../../nginx.conf:/etc/nginx/nginx.conf:ro # Monte le fichier nginx.conf
      - ../../storage/assets/images:/storage/assets/images # Monte les assets
      - ../../storage/assets/logos:/storage/assets/logos # Monte les assets

    depends_on:
      - client
      - api
    networks:
      - pim_network

volumes:
  postgres_data:
    name: pim_postgres_data

networks:
  pim_network:
    name: pim_network
    driver: bridge
